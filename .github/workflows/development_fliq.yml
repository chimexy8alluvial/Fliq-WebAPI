name: Build and deploy ASP.Net Core app to Azure Web App - fliq

on:
  push:
    branches:
      - development
  workflow_dispatch:

jobs:
  build:
    runs-on: windows-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'

      - name: Build with dotnet
        run: dotnet build --configuration Release

      - name: dotnet publish
        run: dotnet publish -c Release -o ${{ github.workspace }}/myapp

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: .net-app
          path: ${{ github.workspace }}/myapp

  deploy:
    runs-on: windows-latest
    needs: build
    environment:
      name: 'Production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up .NET Core
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.x'
          
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: .net-app
      
      - name: Run Database Migrations
        run: |
          # Create migration script
          $migrationScript = @'
          using System;
          using Microsoft.EntityFrameworkCore;
          using Microsoft.Extensions.Configuration;
          using System.IO;
          
          namespace MigrationTool
          {
              public class Program
              {
                  public static void Main(string[] args)
                  {
                      var connectionString = args[0];
                      Console.WriteLine("Starting database migration...");
                      
                      try 
                      {
                          var assembly = typeof(Fliq.Infrastructure.Data.FliqDbContext).Assembly;
                          var optionsBuilder = new DbContextOptionsBuilder<Fliq.Infrastructure.Data.FliqDbContext>();
                          optionsBuilder.UseSqlServer(connectionString);

                          using (var context = new Fliq.Infrastructure.Data.FliqDbContext(optionsBuilder.Options))
                          {
                              Console.WriteLine("Applying migrations...");
                              context.Database.Migrate();
                              Console.WriteLine("Migrations completed successfully.");
                          }
                      }
                      catch (Exception ex)
                      {
                          Console.WriteLine($"Error during migration: {ex.Message}");
                          Console.WriteLine(ex.StackTrace);
                          throw;
                      }
                  }
              }
          }
          '@

          # Save script to file
          Set-Content -Path "migrate.cs" -Value $migrationScript

          # Run the migration script
          dotnet new console -n Migration
          Move-Item -Path "migrate.cs" -Destination "Migration/Program.cs" -Force
          
          # Add all necessary package references
          dotnet add Migration/Migration.csproj reference Fliq.Infrastructure/Fliq.Infrastructure.csproj
          dotnet add Migration/Migration.csproj package Microsoft.EntityFrameworkCore.SqlServer
          dotnet add Migration/Migration.csproj package Microsoft.EntityFrameworkCore.Design
          dotnet add Migration/Migration.csproj package Microsoft.Extensions.Configuration.Json
          dotnet add Migration/Migration.csproj package Microsoft.Extensions.Configuration.EnvironmentVariables
          
          # Build and run with verbose output
          dotnet build Migration/Migration.csproj --verbosity detailed
          if ($LASTEXITCODE -eq 0) {
              dotnet run --project Migration/Migration.csproj -- "${{ secrets.AZURE_SQL_CONNECTION_STRING }}"
          } else {
              throw "Build failed"
          }
        shell: pwsh
        env:
          ASPNETCORE_ENVIRONMENT: Production

      - name: Deploy to Azure Web App
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v3
        with:
          app-name: 'fliqapidev'
          package: .
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
